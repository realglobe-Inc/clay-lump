{
  "classes": [
    {
      "name": "ClayLump",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "ClayLump",
        "description": "Local key value storage of Clay DB.",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "Lump name",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "options",
            "type": "Object",
            "description": "Optional settings",
            "default": "{}",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "options.driver",
            "type": "Driver",
            "description": "Clay driver instance",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": []
      },
      "functions": [
        {
          "name": "sync",
          "access": "",
          "virtual": false,
          "description": "Two-way merge",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise",
            "description": ""
          }
        },
        {
          "name": "assert",
          "access": "",
          "virtual": false,
          "description": "Asset lump state and throw error if something is wrong",
          "parameters": [],
          "examples": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "clayLump",
      "access": "",
      "virtual": false,
      "description": "Create a lump instance. Just an alias of `new ClayLump(config)`",
      "parameters": [],
      "examples": [
        "co(function * () {\n  let lump = clayLump({\n    // Options here\n  })\n  yield lump.open()\n}).catch((err) => console.error(err))"
      ],
      "returns": {
        "type": "ClayLump",
        "description": "- A ClayLump instance"
      }
    },
    {
      "name": "isLump",
      "access": "",
      "virtual": false,
      "description": "Check if an instance is a lump",
      "parameters": [
        {
          "name": "instance",
          "type": "*",
          "description": "Instance to check",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "Boolean",
        "description": "- Lump or not"
      }
    },
    {
      "name": "driverMix",
      "access": "",
      "virtual": false,
      "description": "Mix driver support",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "mergeMix",
      "access": "",
      "virtual": false,
      "description": "Mix merge support",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "resourceMix",
      "access": "",
      "virtual": false,
      "description": "Mix resource support",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    }
  ]
}